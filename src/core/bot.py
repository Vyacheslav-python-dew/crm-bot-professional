from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
import re

from src.config.settings import settings
from src.models.client import Client
from src.models.order import Order
from src.modules.database import AsyncSessionLocal

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==========

class ClientStates(StatesGroup):
    waiting_client_data = State()

class OrderStates(StatesGroup):
    waiting_order_data = State()

# ========== –ö–õ–ò–ï–ù–¢–´ ==========

@dp.message(Command("clients"))
async def cmd_clients(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Client).where(Client.created_by == message.from_user.id)
        )
        clients = result.scalars().all()
        
        if clients:
            clients_text = "üìã <b>–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n"
            for i, client in enumerate(clients, 1):
                clients_text += f"{i}. <b>{client.name}</b>\n"
                if client.phone:
                    clients_text += f"   üìû {client.phone}\n"
                if client.email:
                    clients_text += f"   üìß {client.email}\n"
                if client.notes:
                    clients_text += f"   üìù {client.notes}\n"
                clients_text += f"   üÜî ID: {client.id}\n\n"
            
            await message.answer(clients_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "<code>/add_client</code>",
                parse_mode=ParseMode.HTML
            )

@dp.message(Command("add_client"))
async def cmd_add_client(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    await state.set_state(ClientStates.waiting_client_data)
    await message.answer(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞ | –¢–µ–ª–µ—Ñ–æ–Ω | Email | –ó–∞–º–µ—Ç–∫–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ | +79991234567 | ivan@mail.ru | –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç</code>\n\n"
        "üí° <i>–¢–µ–ª–µ—Ñ–æ–Ω, email –∏ –∑–∞–º–µ—Ç–∫–∏ - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ</i>\n\n"
        "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</b>",
        parse_mode=ParseMode.HTML
    )

@dp.message(ClientStates.waiting_client_data)
async def process_add_client(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == '/cancel':
            await state.clear()
            await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = re.sub(r'\n+', ' ', message.text.strip())
        parts = [part.strip() for part in cleaned_text.split('|')]
        
        if not parts or not parts[0]:
            raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        
        name = parts[0]
        phone = parts[1] if len(parts) > 1 else None
        email = parts[2] if len(parts) > 2 else None
        notes = parts[3] if len(parts) > 3 else None
        
        async with AsyncSessionLocal() as session:
            client = Client(
                name=name,
                phone=phone,
                email=email,
                notes=notes,
                created_by=message.from_user.id
            )
            session.add(client)
            await session.commit()
            await session.refresh(client)
            
            response_text = f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\nüë§ <b>–ò–º—è:</b> {client.name}\n"
            if client.phone:
                response_text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.phone}\n"
            if client.email:
                response_text += f"üìß <b>Email:</b> {client.email}\n"
            if client.notes:
                response_text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {client.notes}\n"
            response_text += f"üÜî <b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.id}"
            
            await message.answer(response_text, parse_mode=ParseMode.HTML)
            await state.clear()
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:</b> {str(e)}\n\n"
            "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</b>",
            parse_mode=ParseMode.HTML
        )

# ========== –ó–ê–ö–ê–ó–´ ==========

@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.created_by == message.from_user.id)
        )
        orders = result.scalars().all()
        
        if orders:
            orders_text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            for i, order in enumerate(orders, 1):
                status_emoji = {
                    "new": "üÜï",
                    "in_progress": "üîÑ", 
                    "completed": "‚úÖ",
                    "cancelled": "‚ùå"
                }.get(order.status, "üì¶")
                
                orders_text += f"{i}. {status_emoji} <b>{order.title}</b>\n"
                orders_text += f"   üí∞ –°—É–º–º–∞: {order.amount} —Ä—É–±.\n"
                orders_text += f"   üìä –°—Ç–∞—Ç—É—Å: {order.status}\n"
                orders_text += f"   üÜî ID: {order.id}\n\n"
            
            await message.answer(orders_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "<code>/add_order</code>",
                parse_mode=ParseMode.HTML
            )

@dp.message(Command("add_order"))
async def cmd_add_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    await state.set_state(OrderStates.waiting_order_data)
    await message.answer(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | –°—É–º–º–∞ | ID –∫–ª–∏–µ–Ω—Ç–∞ | –û–ø–∏—Å–∞–Ω–∏–µ</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ | 50000 | 1 | –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞</code>\n\n"
        "üí° <i>–û–ø–∏—Å–∞–Ω–∏–µ - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</i>\n"
        "üí° <i>ID –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /clients</i>\n\n"
        "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</b>",
        parse_mode=ParseMode.HTML
    )

@dp.message(OrderStates.waiting_order_data)
async def process_add_order(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == '/cancel':
            await state.clear()
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = re.sub(r'\n+', ' ', message.text.strip())
        parts = [part.strip() for part in cleaned_text.split('|')]
        
        if len(parts) < 3:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º—É –∏ ID –∫–ª–∏–µ–Ω—Ç–∞")
        
        title = parts[0]
        
        try:
            amount = float(parts[1].replace(',', '.'))
        except ValueError:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        try:
            client_id = int(parts[2])
        except ValueError:
            raise ValueError("ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        description = parts[3] if len(parts) > 3 else None
        
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_result = await session.execute(
                select(Client).where(
                    Client.id == client_id,
                    Client.created_by == message.from_user.id
                )
            )
            client = client_result.scalar_one_or_none()
            
            if not client:
                await message.answer(
                    "‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                    "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: /clients\n\n"
                    "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</b>",
                    parse_mode=ParseMode.HTML
                )
                return
            
            order = Order(
                title=title,
                amount=amount,
                client_id=client_id,
                description=description,
                created_by=message.from_user.id
            )
            session.add(order)
            await session.commit()
            await session.refresh(order)
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {order.amount} —Ä—É–±.\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client.name}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description or '–Ω–µ—Ç'}\n"
                f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> {order.id}",
                parse_mode=ParseMode.HTML
            )
            await state.clear()
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:</b> {str(e)}\n\n"
            "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</b>",
            parse_mode=ParseMode.HTML
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´ ==========

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with AsyncSessionLocal() as session:
        clients_count = await session.execute(
            select(func.count(Client.id)).where(Client.created_by == message.from_user.id)
        )
        clients_total = clients_count.scalar()
        
        orders_count = await session.execute(
            select(func.count(Order.id)).where(Order.created_by == message.from_user.id)
        )
        orders_total = orders_count.scalar()
        
        total_amount = await session.execute(
            select(func.sum(Order.amount)).where(Order.created_by == message.from_user.id)
        )
        total_revenue = total_amount.scalar() or 0
        
        await message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {clients_total}\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑–æ–≤:</b> {orders_total}\n"
            f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_revenue} —Ä—É–±.\n\n"
            f"üöÄ <b>ProfitPal CRM</b>",
            parse_mode=ParseMode.HTML
        )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    is_admin = user.id in settings.admin_ids_list
    
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProfitPal CRM –ë–æ—Ç!</b>\n\n"
        f"üÜî –í–∞—à ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"ÔøΩÔøΩ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
        f"üìã <b>–ö–æ–º–∞–Ω–¥—ã CRM:</b>\n"
        f"/clients - –º–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã\n"
        f"/add_client - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        f"/orders - –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        f"/add_order - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/profile - –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"/admin - –∞–¥–º–∏–Ω–∫–∞\n"
        f"/cancel - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
        f"üöÄ <b>ProfitPal CRM</b> - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
        parse_mode=ParseMode.HTML
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (help, profile, admin) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥ –∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö)
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(
        "ü§ñ <b>ProfitPal CRM –ë–æ—Ç</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/admin - –∞–¥–º–∏–Ω–∫–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        parse_mode=ParseMode.HTML
    )
