from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from src.config.settings import settings
from src.models.client import Client
from src.models.order import Order
from src.modules.database import AsyncSessionLocal

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()

# ========== –ö–õ–ò–ï–ù–¢–´ ==========

@dp.message(Command("clients"))
async def cmd_clients(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Client).where(Client.created_by == message.from_user.id)
        )
        clients = result.scalars().all()
        
        if clients:
            clients_text = "üìã <b>–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n"
            for i, client in enumerate(clients, 1):
                clients_text += f"{i}. <b>{client.name}</b>\n"
                if client.phone:
                    clients_text += f"   üìû {client.phone}\n"
                if client.email:
                    clients_text += f"   üìß {client.email}\n"
                if client.notes:
                    clients_text += f"   üìù {client.notes}\n"
                clients_text += f"   üÜî ID: {client.id}\n\n"
            
            await message.answer(clients_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "<code>/add_client</code>",
                parse_mode=ParseMode.HTML
            )

@dp.message(Command("add_client"))
async def cmd_add_client(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    await message.answer(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ò–º—è –ö–ª–∏–µ–Ω—Ç–∞ | –¢–µ–ª–µ—Ñ–æ–Ω | Email | –ó–∞–º–µ—Ç–∫–∏</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ | +79991234567 | ivan@mail.ru | –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç</code>\n\n"
        "ÔøΩÔøΩ <i>–¢–µ–ª–µ—Ñ–æ–Ω, email –∏ –∑–∞–º–µ—Ç–∫–∏ - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ</i>\n"
        "üí° <i>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω</i>",
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text.regexp(r'^[^|]+\|'))
async def process_add_client(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        parts = [part.strip() for part in message.text.split('|')]
        name = parts[0]
        
        # –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        phone = None
        email = None
        notes = None
        
        if len(parts) > 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
            second_part = parts[1]
            if any(char.isdigit() for char in second_part) and ('@' not in second_part):
                phone = second_part
                if len(parts) > 2:
                    # –¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ email
                    third_part = parts[2]
                    if '@' in third_part and '.' in third_part:
                        email = third_part
                        if len(parts) > 3:
                            notes = parts[3]
                    else:
                        notes = third_part
            else:
                # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ email –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏
                if '@' in second_part and '.' in second_part:
                    email = second_part
                    if len(parts) > 2:
                        notes = parts[2]
                else:
                    notes = second_part
        
        async with AsyncSessionLocal() as session:
            client = Client(
                name=name,
                phone=phone,
                email=email,
                notes=notes,
                created_by=message.from_user.id
            )
            session.add(client)
            await session.commit()
            await session.refresh(client)
            
            response_text = f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\nüë§ <b>–ò–º—è:</b> {client.name}\n"
            if client.phone:
                response_text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.phone}\n"
            if client.email:
                response_text += f"üìß <b>Email:</b> {client.email}\n"
            if client.notes:
                response_text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {client.notes}\n"
            response_text += f"üÜî <b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.id}"
            
            await message.answer(response_text, parse_mode=ParseMode.HTML)
            
    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

# ========== –ó–ê–ö–ê–ó–´ ==========

@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.created_by == message.from_user.id)
        )
        orders = result.scalars().all()
        
        if orders:
            orders_text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            for i, order in enumerate(orders, 1):
                status_emoji = {
                    "new": "üÜï",
                    "in_progress": "üîÑ", 
                    "completed": "‚úÖ",
                    "cancelled": "‚ùå"
                }.get(order.status, "üì¶")
                
                orders_text += f"{i}. {status_emoji} <b>{order.title}</b>\n"
                orders_text += f"   üí∞ –°—É–º–º–∞: {order.amount} —Ä—É–±.\n"
                orders_text += f"   üìä –°—Ç–∞—Ç—É—Å: {order.status}\n"
                orders_text += f"   üÜî ID: {order.id}\n\n"
            
            await message.answer(orders_text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "üì¶ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "<code>/add_order</code>",
                parse_mode=ParseMode.HTML
            )

@dp.message(Command("add_order"))
async def cmd_add_order(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    await message.answer(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ | –°—É–º–º–∞ | ID –∫–ª–∏–µ–Ω—Ç–∞ | –û–ø–∏—Å–∞–Ω–∏–µ</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ | 50000 | 1 | –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞</code>\n\n"
        "üí° <i>–û–ø–∏—Å–∞–Ω–∏–µ - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</i>\n"
        "üí° <i>ID –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /clients</i>",
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text.regexp(r'^[^|]+\|\s*\d+\.?\d*\|\s*\d+'))
async def process_add_order(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        parts = [part.strip() for part in message.text.split('|')]
        title = parts[0]
        amount = float(parts[1])
        client_id = int(parts[2])
        description = parts[3] if len(parts) > 3 else None
        
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_result = await session.execute(
                select(Client).where(
                    Client.id == client_id,
                    Client.created_by == message.from_user.id
                )
            )
            client = client_result.scalar_one_or_none()
            
            if not client:
                await message.answer(
                    "‚ùå <b>–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                    "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: /clients",
                    parse_mode=ParseMode.HTML
                )
                return
            
            order = Order(
                title=title,
                amount=amount,
                client_id=client_id,
                description=description,
                created_by=message.from_user.id
            )
            session.add(order)
            await session.commit()
            await session.refresh(order)
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {order.amount} —Ä—É–±.\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client.name}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description or '–Ω–µ—Ç'}\n"
                f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> {order.id}",
                parse_mode=ParseMode.HTML
            )
            
    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode=ParseMode.HTML
        )

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with AsyncSessionLocal() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_count = await session.execute(
            select(func.count(Client.id)).where(Client.created_by == message.from_user.id)
        )
        clients_total = clients_count.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        orders_count = await session.execute(
            select(func.count(Order.id)).where(Order.created_by == message.from_user.id)
        )
        orders_total = orders_count.scalar()
        
        # –°—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        total_amount = await session.execute(
            select(func.sum(Order.amount)).where(Order.created_by == message.from_user.id)
        )
        total_revenue = total_amount.scalar() or 0
        
        await message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {clients_total}\n"
            f"üì¶ <b>–ó–∞–∫–∞–∑–æ–≤:</b> {orders_total}\n"
            f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_revenue} —Ä—É–±.\n\n"
            f"üöÄ <b>ProfitPal CRM</b>",
            parse_mode=ParseMode.HTML
        )

# ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞
    is_admin = user.id in settings.admin_ids_list
    
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProfitPal CRM –ë–æ—Ç!</b>\n\n"
        f"üÜî –í–∞—à ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
        f"üìã <b>–ö–æ–º–∞–Ω–¥—ã CRM:</b>\n"
        f"/clients - –º–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã\n"
        f"/add_client - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        f"/orders - –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        f"/add_order - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"/profile - –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"/admin - –∞–¥–º–∏–Ω–∫–∞\n\n"
        f"üöÄ <b>ProfitPal CRM</b> - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>ProfitPal CRM –ë–æ—Ç</b>\n\n"
        "üìä <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂\n\n"
        "üëë <b>–î–ª—è –∞–¥–º–∏–Ω–æ–≤:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é!",
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user = message.from_user
    is_admin = user.id in settings.admin_ids_list
    
    await message.answer(
        f"üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üìõ –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
        f"üíº <b>ProfitPal CRM</b>",
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    user = message.from_user
    
    if user.id not in settings.admin_ids_list:
        await message.answer("‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode=ParseMode.HTML)
        return
        
    await message.answer(
        "üë®üíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "‚úÖ <b>–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω</b>\n"
        f"üÜî –í–∞—à ID: <code>{user.id}</code>\n\n"
        "üìà <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
        "ÔøΩÔøΩ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥)
@dp.message(F.text)
async def echo_message(message: types.Message):
    await message.answer(
        "ü§ñ <b>ProfitPal CRM –ë–æ—Ç</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/admin - –∞–¥–º–∏–Ω–∫–∞",
        parse_mode=ParseMode.HTML
    )
